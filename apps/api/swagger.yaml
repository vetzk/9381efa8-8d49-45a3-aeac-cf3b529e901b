openapi: 3.0.0
info:
  title: User Management API
  description: API for managing user data.
  version: 1.0.0
servers:
  - url: http://localhost:3000

paths:
  /users:
    post:
      summary: Create a new user
      description: Creates a new user with the provided information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                position:
                  type: string
                  example: Developer
                phone:
                  type: string
                  example: "123-456-7890"
                email:
                  type: string
                  example: john.doe@example.com
      responses:
        "200":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Create user success"
                  result:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid input data
        "500":
          description: Server error
    get:
      summary: Get all users
      description: Retrieves all users.
      responses:
        "200":
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Get all user success"
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        "500":
          description: Server error
    put:
      summary: Update multiple users
      description: Updates user information for multiple users.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  firstName:
                    type: string
                    example: Jane
                  lastName:
                    type: string
                    example: Smith
                  position:
                    type: string
                    example: Manager
                  phone:
                    type: string
                    example: "987-654-3210"
                  email:
                    type: string
                    example: jane.smith@example.com
      responses:
        "200":
          description: Users updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Users updated successfully"
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        "400":
          description: Invalid input data
        "500":
          description: Server error

  /users/paginate:
    get:
      summary: Get paginated users
      description: Retrieves a paginated list of users.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            example: 8
          description: Number of users per page
      responses:
        "200":
          description: Paginated list of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  result:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  total:
                    type: integer
                    example: 50
                  totalPages:
                    type: integer
                    example: 7
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 8
        "500":
          description: Server error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        position:
          type: string
          example: Developer
        phone:
          type: string
          example: "123-456-7890"
        email:
          type: string
          example: john.doe@example.com
